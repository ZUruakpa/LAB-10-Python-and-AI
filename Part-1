import pandas as pd
import folium

def display_water_quality_sites_on_map(csv_file='station.csv'):
    """
    Reads station data from a CSV file, filters for water quality measurement sites,
    and displays their locations on an interactive map using folium.
    """
    try:
        df = pd.read_csv(csv_file)
    except Exception as e:
        print(f"Error reading the CSV file: {e}")
        return

    if 'MeasurementType' in df.columns:
        df = df[df['MeasurementType'].str.contains('water quality', case=False, na=False)]

    if 'MonitoringLocationIdentifier' in df.columns:
        unique_sites = df.drop_duplicates(subset=['MonitoringLocationIdentifier'])
    else:
        print("Error: The CSV file does not have a 'MonitoringLocationIdentifier' column.")
        return

    coords = []
    locations_list = []

    if 'LatitudeMeasure' in unique_sites.columns and 'LongitudeMeasure' in unique_sites.columns:
        for idx, row in unique_sites.iterrows():
            try:
                lat = float(row['LatitudeMeasure'])
                lon = float(row['LongitudeMeasure'])
                coords.append((lat, lon))
                locations_list.append((lat, lon, row['MonitoringLocationIdentifier']))
            except Exception as e:
                print(f"Error converting LatitudeMeasure/LongitudeMeasure for {row['MonitoringLocationIdentifier']}: {e}")

    elif 'MonitoringLocationName' in unique_sites.columns:
        def parse_coordinates(location_str):
            try:
                parts = location_str.split(',')
                if len(parts) < 2:
                    raise ValueError("Insufficient coordinate parts.")
                lat = float(parts[0].strip())
                lon = float(parts[1].strip())
                return lat, lon
            except Exception as e:
                print(f"Error parsing coordinates from '{location_str}': {e}")
                return None, None

        for idx, row in unique_sites.iterrows():
            lat, lon = parse_coordinates(row['MonitoringLocationName'])
            if lat is not None and lon is not None:
                coords.append((lat, lon))
                locations_list.append((lat, lon, row['MonitoringLocationIdentifier']))
    else:
        print("Error: The CSV file does not have 'MonitoringLocationName' or separate 'LatitudeMeasure' and 'LongitudeMeasure' columns.")
        return

    if not coords:
        print("No valid coordinate information found.")
        return

    avg_lat = sum(lat for lat, lon in coords) / len(coords)
    avg_lon = sum(lon for lat, lon in coords) / len(coords)

    # Corrected: Pass the location as the first argument to folium.Map
    m = folium.Map(location=[avg_lat, avg_lon], zoom_start=10)

    # Corrected: Pass the location as the first argument to folium.Marker
    for lat, lon, identifier in locations_list:
        folium.Marker(location=[lat, lon], popup=identifier).add_to(m)

    map_filename = "water_quality_sites_map.html"
    m.save(map_filename)
    print(f"Map saved as '{map_filename}'.")

if __name__ == "__main__":
    display_water_quality_sites_on_map('station.csv')
